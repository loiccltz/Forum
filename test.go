/*package main

import (
	"database/sql"
	"fmt"
	"log"
	"forum/backend"

	_ "github.com/go-sql-driver/mysql"
)

// Fonction pour tester la cr√©ation et la r√©cup√©ration des notifications
func testNotification(db *sql.DB) {
	// Utilisateur avec ID 4 pour tester
	userID := 4
	notifType := "Nouveau commentaire"
	sourceID := 123 // L'ID du post ou autre source d'une notification

	// Cr√©er une notification pour cet utilisateur
	err := backend.CreateNotification(db, userID, notifType, sourceID)
	if err != nil {
		log.Fatalf("‚ùå Erreur lors de la cr√©ation de la notification : %v", err)
	} else {
		fmt.Println("‚úÖ Notification ajout√©e avec succ√®s.")
	}

	// V√©rifier si la notification a bien √©t√© ajout√©e
	notifications, err := backend.GetUserNotifications(db, userID)
	if err != nil {
		log.Fatalf("‚ùå Erreur lors de la r√©cup√©ration des notifications : %v", err)
	}

	// Afficher les notifications
	fmt.Println("üìú Liste des notifications :")
	for _, notif := range notifications {
		fmt.Printf("üîî ID: %d | Type: %s | Source ID: %d | Date: %v\n", notif.ID, notif.Type, notif.SourceID, notif.CreatedAt)
	}
}

func main() {
	// Initialisation de la base de donn√©es
	db, err := backend.InitDB()
	if err != nil {
		log.Fatal("‚ùå Erreur de connexion √† la base de donn√©es :", err)
	}
	defer db.Close()

	// Ex√©cuter le test des notifications
	testNotification(db)
}
